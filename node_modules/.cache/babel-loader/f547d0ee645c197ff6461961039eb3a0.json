{"ast":null,"code":"// // eslint-disable-next-line import/no-cycle\nimport { LOGIN_USER, LOGIN_USER_SUCCESS, LOGOUT_USER, REGISTER_USER, REGISTER_USER_SUCCESS, LOGIN_USER_ERROR, REGISTER_USER_ERROR, FORGOT_PASSWORD, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_ERROR, RESET_PASSWORD, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_ERROR } from '../actions';\nexport const loginUser = (user, history) => ({\n  type: LOGIN_USER,\n  payload: {\n    user,\n    history\n  }\n});\nexport const loginUserSuccess = user => ({\n  type: LOGIN_USER_SUCCESS,\n  payload: user\n});\nexport const loginUserError = message => ({\n  type: LOGIN_USER_ERROR,\n  payload: {\n    message\n  }\n});\nexport const forgotPassword = (forgotUserMail, history) => ({\n  type: FORGOT_PASSWORD,\n  payload: {\n    forgotUserMail,\n    history\n  }\n});\nexport const forgotPasswordSuccess = forgotUserMail => ({\n  type: FORGOT_PASSWORD_SUCCESS,\n  payload: forgotUserMail\n});\nexport const forgotPasswordError = message => ({\n  type: FORGOT_PASSWORD_ERROR,\n  payload: {\n    message\n  }\n});\nexport const resetPassword = ({\n  resetPasswordCode,\n  newPassword,\n  history\n}) => ({\n  type: RESET_PASSWORD,\n  payload: {\n    resetPasswordCode,\n    newPassword,\n    history\n  }\n});\nexport const resetPasswordSuccess = newPassword => ({\n  type: RESET_PASSWORD_SUCCESS,\n  payload: newPassword\n});\nexport const resetPasswordError = message => ({\n  type: RESET_PASSWORD_ERROR,\n  payload: {\n    message\n  }\n});\nexport const registerUser = (user, history) => ({\n  type: REGISTER_USER,\n  payload: {\n    user,\n    history\n  }\n});\nexport const registerUserSuccess = user => ({\n  type: REGISTER_USER_SUCCESS,\n  payload: user\n});\nexport const registerUserError = message => ({\n  type: REGISTER_USER_ERROR,\n  payload: {\n    message\n  }\n});\nexport const logoutUser = history => ({\n  type: LOGOUT_USER,\n  payload: {\n    history\n  }\n});","map":{"version":3,"sources":["C:/react-pc/src/redux/auth/actions.js"],"names":["LOGIN_USER","LOGIN_USER_SUCCESS","LOGOUT_USER","REGISTER_USER","REGISTER_USER_SUCCESS","LOGIN_USER_ERROR","REGISTER_USER_ERROR","FORGOT_PASSWORD","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_ERROR","RESET_PASSWORD","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_ERROR","loginUser","user","history","type","payload","loginUserSuccess","loginUserError","message","forgotPassword","forgotUserMail","forgotPasswordSuccess","forgotPasswordError","resetPassword","resetPasswordCode","newPassword","resetPasswordSuccess","resetPasswordError","registerUser","registerUserSuccess","registerUserError","logoutUser"],"mappings":"AAAA;AACA,SACEA,UADF,EAEEC,kBAFF,EAGEC,WAHF,EAIEC,aAJF,EAKEC,qBALF,EAMEC,gBANF,EAOEC,mBAPF,EAQEC,eARF,EASEC,uBATF,EAUEC,qBAVF,EAWEC,cAXF,EAYEC,sBAZF,EAaEC,oBAbF,QAcO,YAdP;AAgBA,OAAO,MAAMC,SAAS,GAAG,CAACC,IAAD,EAAOC,OAAP,MAAoB;AAC3CC,EAAAA,IAAI,EAAEhB,UADqC;AAE3CiB,EAAAA,OAAO,EAAE;AAAEH,IAAAA,IAAF;AAAQC,IAAAA;AAAR;AAFkC,CAApB,CAAlB;AAIP,OAAO,MAAMG,gBAAgB,GAAIJ,IAAD,KAAW;AACzCE,EAAAA,IAAI,EAAEf,kBADmC;AAEzCgB,EAAAA,OAAO,EAAEH;AAFgC,CAAX,CAAzB;AAIP,OAAO,MAAMK,cAAc,GAAIC,OAAD,KAAc;AAC1CJ,EAAAA,IAAI,EAAEX,gBADoC;AAE1CY,EAAAA,OAAO,EAAE;AAAEG,IAAAA;AAAF;AAFiC,CAAd,CAAvB;AAKP,OAAO,MAAMC,cAAc,GAAG,CAACC,cAAD,EAAiBP,OAAjB,MAA8B;AAC1DC,EAAAA,IAAI,EAAET,eADoD;AAE1DU,EAAAA,OAAO,EAAE;AAAEK,IAAAA,cAAF;AAAkBP,IAAAA;AAAlB;AAFiD,CAA9B,CAAvB;AAIP,OAAO,MAAMQ,qBAAqB,GAAID,cAAD,KAAqB;AACxDN,EAAAA,IAAI,EAAER,uBADkD;AAExDS,EAAAA,OAAO,EAAEK;AAF+C,CAArB,CAA9B;AAIP,OAAO,MAAME,mBAAmB,GAAIJ,OAAD,KAAc;AAC/CJ,EAAAA,IAAI,EAAEP,qBADyC;AAE/CQ,EAAAA,OAAO,EAAE;AAAEG,IAAAA;AAAF;AAFsC,CAAd,CAA5B;AAKP,OAAO,MAAMK,aAAa,GAAG,CAAC;AAAEC,EAAAA,iBAAF;AAAqBC,EAAAA,WAArB;AAAkCZ,EAAAA;AAAlC,CAAD,MAAkD;AAC7EC,EAAAA,IAAI,EAAEN,cADuE;AAE7EO,EAAAA,OAAO,EAAE;AAAES,IAAAA,iBAAF;AAAqBC,IAAAA,WAArB;AAAkCZ,IAAAA;AAAlC;AAFoE,CAAlD,CAAtB;AAIP,OAAO,MAAMa,oBAAoB,GAAID,WAAD,KAAkB;AACpDX,EAAAA,IAAI,EAAEL,sBAD8C;AAEpDM,EAAAA,OAAO,EAAEU;AAF2C,CAAlB,CAA7B;AAIP,OAAO,MAAME,kBAAkB,GAAIT,OAAD,KAAc;AAC9CJ,EAAAA,IAAI,EAAEJ,oBADwC;AAE9CK,EAAAA,OAAO,EAAE;AAAEG,IAAAA;AAAF;AAFqC,CAAd,CAA3B;AAKP,OAAO,MAAMU,YAAY,GAAG,CAAChB,IAAD,EAAOC,OAAP,MAAoB;AAC9CC,EAAAA,IAAI,EAAEb,aADwC;AAE9Cc,EAAAA,OAAO,EAAE;AAAEH,IAAAA,IAAF;AAAQC,IAAAA;AAAR;AAFqC,CAApB,CAArB;AAIP,OAAO,MAAMgB,mBAAmB,GAAIjB,IAAD,KAAW;AAC5CE,EAAAA,IAAI,EAAEZ,qBADsC;AAE5Ca,EAAAA,OAAO,EAAEH;AAFmC,CAAX,CAA5B;AAIP,OAAO,MAAMkB,iBAAiB,GAAIZ,OAAD,KAAc;AAC7CJ,EAAAA,IAAI,EAAEV,mBADuC;AAE7CW,EAAAA,OAAO,EAAE;AAAEG,IAAAA;AAAF;AAFoC,CAAd,CAA1B;AAKP,OAAO,MAAMa,UAAU,GAAIlB,OAAD,KAAc;AACtCC,EAAAA,IAAI,EAAEd,WADgC;AAEtCe,EAAAA,OAAO,EAAE;AAAEF,IAAAA;AAAF;AAF6B,CAAd,CAAnB","sourcesContent":["// // eslint-disable-next-line import/no-cycle\r\nimport {\r\n  LOGIN_USER,\r\n  LOGIN_USER_SUCCESS,\r\n  LOGOUT_USER,\r\n  REGISTER_USER,\r\n  REGISTER_USER_SUCCESS,\r\n  LOGIN_USER_ERROR,\r\n  REGISTER_USER_ERROR,\r\n  FORGOT_PASSWORD,\r\n  FORGOT_PASSWORD_SUCCESS,\r\n  FORGOT_PASSWORD_ERROR,\r\n  RESET_PASSWORD,\r\n  RESET_PASSWORD_SUCCESS,\r\n  RESET_PASSWORD_ERROR,\r\n} from '../actions';\r\n\r\nexport const loginUser = (user, history) => ({\r\n  type: LOGIN_USER,\r\n  payload: { user, history },\r\n});\r\nexport const loginUserSuccess = (user) => ({\r\n  type: LOGIN_USER_SUCCESS,\r\n  payload: user,\r\n});\r\nexport const loginUserError = (message) => ({\r\n  type: LOGIN_USER_ERROR,\r\n  payload: { message },\r\n});\r\n\r\nexport const forgotPassword = (forgotUserMail, history) => ({\r\n  type: FORGOT_PASSWORD,\r\n  payload: { forgotUserMail, history },\r\n});\r\nexport const forgotPasswordSuccess = (forgotUserMail) => ({\r\n  type: FORGOT_PASSWORD_SUCCESS,\r\n  payload: forgotUserMail,\r\n});\r\nexport const forgotPasswordError = (message) => ({\r\n  type: FORGOT_PASSWORD_ERROR,\r\n  payload: { message },\r\n});\r\n\r\nexport const resetPassword = ({ resetPasswordCode, newPassword, history }) => ({\r\n  type: RESET_PASSWORD,\r\n  payload: { resetPasswordCode, newPassword, history },\r\n});\r\nexport const resetPasswordSuccess = (newPassword) => ({\r\n  type: RESET_PASSWORD_SUCCESS,\r\n  payload: newPassword,\r\n});\r\nexport const resetPasswordError = (message) => ({\r\n  type: RESET_PASSWORD_ERROR,\r\n  payload: { message },\r\n});\r\n\r\nexport const registerUser = (user, history) => ({\r\n  type: REGISTER_USER,\r\n  payload: { user, history },\r\n});\r\nexport const registerUserSuccess = (user) => ({\r\n  type: REGISTER_USER_SUCCESS,\r\n  payload: user,\r\n});\r\nexport const registerUserError = (message) => ({\r\n  type: REGISTER_USER_ERROR,\r\n  payload: { message },\r\n});\r\n\r\nexport const logoutUser = (history) => ({\r\n  type: LOGOUT_USER,\r\n  payload: { history },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}